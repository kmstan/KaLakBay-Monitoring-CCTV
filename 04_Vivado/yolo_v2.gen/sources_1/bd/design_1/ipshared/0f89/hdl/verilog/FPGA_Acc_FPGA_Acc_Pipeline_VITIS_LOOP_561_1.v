// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FPGA_Acc_FPGA_Acc_Pipeline_VITIS_LOOP_561_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_256b_1,
        tmp_256b_0,
        ofm_num,
        bias_buffer_address0,
        bias_buffer_ce0,
        bias_buffer_we0,
        bias_buffer_d0,
        local_buf_1_address0,
        local_buf_1_ce0,
        local_buf_1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] tmp_256b_1;
input  [15:0] tmp_256b_0;
input  [11:0] ofm_num;
output  [9:0] bias_buffer_address0;
output   bias_buffer_ce0;
output   bias_buffer_we0;
output  [15:0] bias_buffer_d0;
output  [9:0] local_buf_1_address0;
output   local_buf_1_ce0;
input  [31:0] local_buf_1_q0;

reg ap_idle;
reg bias_buffer_ce0;
reg bias_buffer_we0;
reg local_buf_1_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln561_fu_150_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [10:0] t_5_reg_314;
reg   [10:0] t_5_reg_314_pp0_iter1_reg;
reg   [10:0] t_5_reg_314_pp0_iter2_reg;
wire   [0:0] trunc_ln565_fu_165_p1;
reg   [0:0] trunc_ln565_reg_323;
reg   [0:0] trunc_ln565_reg_323_pp0_iter1_reg;
reg   [0:0] trunc_ln565_reg_323_pp0_iter2_reg;
wire   [0:0] icmp_ln568_fu_175_p2;
reg   [0:0] icmp_ln568_reg_328;
reg   [0:0] icmp_ln568_reg_328_pp0_iter1_reg;
reg   [0:0] icmp_ln568_reg_328_pp0_iter2_reg;
wire   [15:0] tmp_256b_0_3_fu_225_p1;
reg   [15:0] tmp_256b_0_3_reg_340;
reg   [15:0] tmp_256b_1_1_reg_345;
wire   [63:0] zext_ln571_fu_202_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln561_fu_245_p1;
reg   [15:0] cnt_fu_54;
wire   [15:0] cnt_7_fu_213_p3;
wire    ap_loop_init;
reg   [7:0] bn_fu_58;
reg   [7:0] ap_sig_allocacmp_bn_load;
wire   [7:0] bn_2_fu_181_p3;
reg   [10:0] t_fu_62;
reg   [10:0] ap_sig_allocacmp_t_5;
wire   [10:0] add_ln561_fu_156_p2;
reg   [15:0] tmp_256b_0_1_fu_66;
wire   [15:0] tmp_256b_0_4_fu_263_p3;
reg   [15:0] tmp_256b_1_3_fu_70;
wire   [15:0] tmp_256b_1_4_fu_257_p3;
wire   [11:0] zext_ln561_1_fu_146_p1;
wire   [7:0] bn_1_fu_169_p2;
wire   [15:0] cnt_6_fu_207_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

FPGA_Acc_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln561_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            bn_fu_58 <= bn_2_fu_181_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            bn_fu_58 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cnt_fu_54 <= 16'd1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cnt_fu_54 <= cnt_7_fu_213_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln561_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            t_fu_62 <= add_ln561_fu_156_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            t_fu_62 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tmp_256b_0_1_fu_66 <= tmp_256b_0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            tmp_256b_0_1_fu_66 <= tmp_256b_0_4_fu_263_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tmp_256b_1_3_fu_70 <= tmp_256b_1;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            tmp_256b_1_3_fu_70 <= tmp_256b_1_4_fu_257_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln568_reg_328_pp0_iter1_reg <= icmp_ln568_reg_328;
        t_5_reg_314 <= ap_sig_allocacmp_t_5;
        t_5_reg_314_pp0_iter1_reg <= t_5_reg_314;
        trunc_ln565_reg_323_pp0_iter1_reg <= trunc_ln565_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln561_fu_150_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln568_reg_328 <= icmp_ln568_fu_175_p2;
        trunc_ln565_reg_323 <= trunc_ln565_fu_165_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln568_reg_328_pp0_iter2_reg <= icmp_ln568_reg_328_pp0_iter1_reg;
        t_5_reg_314_pp0_iter2_reg <= t_5_reg_314_pp0_iter1_reg;
        trunc_ln565_reg_323_pp0_iter2_reg <= trunc_ln565_reg_323_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln568_reg_328_pp0_iter1_reg == 1'd1))) begin
        tmp_256b_0_3_reg_340 <= tmp_256b_0_3_fu_225_p1;
        tmp_256b_1_1_reg_345 <= {{local_buf_1_q0[31:16]}};
    end
end

always @ (*) begin
    if (((icmp_ln561_fu_150_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_bn_load = 8'd0;
    end else begin
        ap_sig_allocacmp_bn_load = bn_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_5 = 11'd0;
    end else begin
        ap_sig_allocacmp_t_5 = t_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        bias_buffer_ce0 = 1'b1;
    end else begin
        bias_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        bias_buffer_we0 = 1'b1;
    end else begin
        bias_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_buf_1_ce0 = 1'b1;
    end else begin
        local_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln561_fu_156_p2 = (ap_sig_allocacmp_t_5 + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bias_buffer_address0 = zext_ln561_fu_245_p1;

assign bias_buffer_d0 = ((trunc_ln565_reg_323_pp0_iter2_reg[0:0] == 1'b1) ? tmp_256b_1_3_fu_70 : tmp_256b_0_1_fu_66);

assign bn_1_fu_169_p2 = (ap_sig_allocacmp_bn_load + 8'd1);

assign bn_2_fu_181_p3 = ((icmp_ln568_fu_175_p2[0:0] == 1'b1) ? 8'd0 : bn_1_fu_169_p2);

assign cnt_6_fu_207_p2 = (cnt_fu_54 + 16'd1);

assign cnt_7_fu_213_p3 = ((icmp_ln568_reg_328[0:0] == 1'b1) ? cnt_6_fu_207_p2 : cnt_fu_54);

assign icmp_ln561_fu_150_p2 = ((zext_ln561_1_fu_146_p1 == ofm_num) ? 1'b1 : 1'b0);

assign icmp_ln568_fu_175_p2 = ((bn_1_fu_169_p2 == 8'd2) ? 1'b1 : 1'b0);

assign local_buf_1_address0 = zext_ln571_fu_202_p1;

assign tmp_256b_0_3_fu_225_p1 = local_buf_1_q0[15:0];

assign tmp_256b_0_4_fu_263_p3 = ((icmp_ln568_reg_328_pp0_iter2_reg[0:0] == 1'b1) ? tmp_256b_0_3_reg_340 : tmp_256b_0_1_fu_66);

assign tmp_256b_1_4_fu_257_p3 = ((icmp_ln568_reg_328_pp0_iter2_reg[0:0] == 1'b1) ? tmp_256b_1_1_reg_345 : tmp_256b_1_3_fu_70);

assign trunc_ln565_fu_165_p1 = ap_sig_allocacmp_bn_load[0:0];

assign zext_ln561_1_fu_146_p1 = ap_sig_allocacmp_t_5;

assign zext_ln561_fu_245_p1 = t_5_reg_314_pp0_iter2_reg;

assign zext_ln571_fu_202_p1 = cnt_fu_54;

endmodule //FPGA_Acc_FPGA_Acc_Pipeline_VITIS_LOOP_561_1
