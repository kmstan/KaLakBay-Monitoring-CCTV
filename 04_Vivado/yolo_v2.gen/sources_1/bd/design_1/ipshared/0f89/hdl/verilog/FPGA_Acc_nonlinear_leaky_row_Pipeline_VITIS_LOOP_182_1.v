// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FPGA_Acc_nonlinear_leaky_row_Pipeline_VITIS_LOOP_182_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        TC_MIN,
        mul_ln186,
        Input_0_address0,
        Input_0_ce0,
        Input_0_q0,
        Input_1_address0,
        Input_1_ce0,
        Input_1_q0,
        Input_2_address0,
        Input_2_ce0,
        Input_2_q0,
        Input_3_address0,
        Input_3_ce0,
        Input_3_q0,
        Input_4_address0,
        Input_4_ce0,
        Input_4_q0,
        Input_5_address0,
        Input_5_ce0,
        Input_5_q0,
        Input_6_address0,
        Input_6_ce0,
        Input_6_q0,
        Input_7_address0,
        Input_7_ce0,
        Input_7_q0,
        Input_8_address0,
        Input_8_ce0,
        Input_8_q0,
        Input_9_address0,
        Input_9_ce0,
        Input_9_q0,
        Input_10_address0,
        Input_10_ce0,
        Input_10_q0,
        Input_11_address0,
        Input_11_ce0,
        Input_11_q0,
        Input_12_address0,
        Input_12_ce0,
        Input_12_q0,
        Input_13_address0,
        Input_13_ce0,
        Input_13_q0,
        Input_14_address0,
        Input_14_ce0,
        Input_14_q0,
        Input_15_address0,
        Input_15_ce0,
        Input_15_q0,
        Input_16_address0,
        Input_16_ce0,
        Input_16_q0,
        Input_17_address0,
        Input_17_ce0,
        Input_17_q0,
        Input_18_address0,
        Input_18_ce0,
        Input_18_q0,
        Input_19_address0,
        Input_19_ce0,
        Input_19_q0,
        Input_20_address0,
        Input_20_ce0,
        Input_20_q0,
        Input_21_address0,
        Input_21_ce0,
        Input_21_q0,
        Input_22_address0,
        Input_22_ce0,
        Input_22_q0,
        Input_23_address0,
        Input_23_ce0,
        Input_23_q0,
        Input_24_address0,
        Input_24_ce0,
        Input_24_q0,
        Input_25_address0,
        Input_25_ce0,
        Input_25_q0,
        Input_26_address0,
        Input_26_ce0,
        Input_26_q0,
        Input_27_address0,
        Input_27_ce0,
        Input_27_q0,
        Input_28_address0,
        Input_28_ce0,
        Input_28_q0,
        Input_29_address0,
        Input_29_ce0,
        Input_29_q0,
        Input_30_address0,
        Input_30_ce0,
        Input_30_q0,
        Input_31_address0,
        Input_31_ce0,
        Input_31_q0,
        Input_32_address0,
        Input_32_ce0,
        Input_32_q0,
        Input_33_address0,
        Input_33_ce0,
        Input_33_q0,
        Input_34_address0,
        Input_34_ce0,
        Input_34_q0,
        Input_35_address0,
        Input_35_ce0,
        Input_35_q0,
        Input_36_address0,
        Input_36_ce0,
        Input_36_q0,
        Input_37_address0,
        Input_37_ce0,
        Input_37_q0,
        Input_38_address0,
        Input_38_ce0,
        Input_38_q0,
        Input_39_address0,
        Input_39_ce0,
        Input_39_q0,
        Input_40_address0,
        Input_40_ce0,
        Input_40_q0,
        Input_41_address0,
        Input_41_ce0,
        Input_41_q0,
        Input_42_address0,
        Input_42_ce0,
        Input_42_q0,
        Input_43_address0,
        Input_43_ce0,
        Input_43_q0,
        Input_44_address0,
        Input_44_ce0,
        Input_44_q0,
        Input_45_address0,
        Input_45_ce0,
        Input_45_q0,
        Input_46_address0,
        Input_46_ce0,
        Input_46_q0,
        Input_47_address0,
        Input_47_ce0,
        Input_47_q0,
        Input_48_address0,
        Input_48_ce0,
        Input_48_q0,
        Input_49_address0,
        Input_49_ce0,
        Input_49_q0,
        Input_50_address0,
        Input_50_ce0,
        Input_50_q0,
        Input_51_address0,
        Input_51_ce0,
        Input_51_q0,
        Input_52_address0,
        Input_52_ce0,
        Input_52_q0,
        Input_53_address0,
        Input_53_ce0,
        Input_53_q0,
        Input_54_address0,
        Input_54_ce0,
        Input_54_q0,
        Input_55_address0,
        Input_55_ce0,
        Input_55_q0,
        Input_56_address0,
        Input_56_ce0,
        Input_56_q0,
        Input_57_address0,
        Input_57_ce0,
        Input_57_q0,
        Input_58_address0,
        Input_58_ce0,
        Input_58_q0,
        Input_59_address0,
        Input_59_ce0,
        Input_59_q0,
        trunc_ln,
        IsNL,
        InterSubOutput_cast,
        cmp15,
        local_buf_address0,
        local_buf_ce0,
        local_buf_we0,
        local_buf_d0,
        buf_256b_1_0121_out,
        buf_256b_1_0121_out_ap_vld,
        buf_256b_0_0120_out,
        buf_256b_0_0120_out_ap_vld,
        bn_local_out,
        bn_local_out_ap_vld,
        cnt_out,
        cnt_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] TC_MIN;
input  [9:0] mul_ln186;
output  [9:0] Input_0_address0;
output   Input_0_ce0;
input  [31:0] Input_0_q0;
output  [9:0] Input_1_address0;
output   Input_1_ce0;
input  [31:0] Input_1_q0;
output  [9:0] Input_2_address0;
output   Input_2_ce0;
input  [31:0] Input_2_q0;
output  [9:0] Input_3_address0;
output   Input_3_ce0;
input  [31:0] Input_3_q0;
output  [9:0] Input_4_address0;
output   Input_4_ce0;
input  [31:0] Input_4_q0;
output  [9:0] Input_5_address0;
output   Input_5_ce0;
input  [31:0] Input_5_q0;
output  [9:0] Input_6_address0;
output   Input_6_ce0;
input  [31:0] Input_6_q0;
output  [9:0] Input_7_address0;
output   Input_7_ce0;
input  [31:0] Input_7_q0;
output  [9:0] Input_8_address0;
output   Input_8_ce0;
input  [31:0] Input_8_q0;
output  [9:0] Input_9_address0;
output   Input_9_ce0;
input  [31:0] Input_9_q0;
output  [9:0] Input_10_address0;
output   Input_10_ce0;
input  [31:0] Input_10_q0;
output  [9:0] Input_11_address0;
output   Input_11_ce0;
input  [31:0] Input_11_q0;
output  [9:0] Input_12_address0;
output   Input_12_ce0;
input  [31:0] Input_12_q0;
output  [9:0] Input_13_address0;
output   Input_13_ce0;
input  [31:0] Input_13_q0;
output  [9:0] Input_14_address0;
output   Input_14_ce0;
input  [31:0] Input_14_q0;
output  [9:0] Input_15_address0;
output   Input_15_ce0;
input  [31:0] Input_15_q0;
output  [9:0] Input_16_address0;
output   Input_16_ce0;
input  [31:0] Input_16_q0;
output  [9:0] Input_17_address0;
output   Input_17_ce0;
input  [31:0] Input_17_q0;
output  [9:0] Input_18_address0;
output   Input_18_ce0;
input  [31:0] Input_18_q0;
output  [9:0] Input_19_address0;
output   Input_19_ce0;
input  [31:0] Input_19_q0;
output  [9:0] Input_20_address0;
output   Input_20_ce0;
input  [31:0] Input_20_q0;
output  [9:0] Input_21_address0;
output   Input_21_ce0;
input  [31:0] Input_21_q0;
output  [9:0] Input_22_address0;
output   Input_22_ce0;
input  [31:0] Input_22_q0;
output  [9:0] Input_23_address0;
output   Input_23_ce0;
input  [31:0] Input_23_q0;
output  [9:0] Input_24_address0;
output   Input_24_ce0;
input  [31:0] Input_24_q0;
output  [9:0] Input_25_address0;
output   Input_25_ce0;
input  [31:0] Input_25_q0;
output  [9:0] Input_26_address0;
output   Input_26_ce0;
input  [31:0] Input_26_q0;
output  [9:0] Input_27_address0;
output   Input_27_ce0;
input  [31:0] Input_27_q0;
output  [9:0] Input_28_address0;
output   Input_28_ce0;
input  [31:0] Input_28_q0;
output  [9:0] Input_29_address0;
output   Input_29_ce0;
input  [31:0] Input_29_q0;
output  [9:0] Input_30_address0;
output   Input_30_ce0;
input  [31:0] Input_30_q0;
output  [9:0] Input_31_address0;
output   Input_31_ce0;
input  [31:0] Input_31_q0;
output  [9:0] Input_32_address0;
output   Input_32_ce0;
input  [31:0] Input_32_q0;
output  [9:0] Input_33_address0;
output   Input_33_ce0;
input  [31:0] Input_33_q0;
output  [9:0] Input_34_address0;
output   Input_34_ce0;
input  [31:0] Input_34_q0;
output  [9:0] Input_35_address0;
output   Input_35_ce0;
input  [31:0] Input_35_q0;
output  [9:0] Input_36_address0;
output   Input_36_ce0;
input  [31:0] Input_36_q0;
output  [9:0] Input_37_address0;
output   Input_37_ce0;
input  [31:0] Input_37_q0;
output  [9:0] Input_38_address0;
output   Input_38_ce0;
input  [31:0] Input_38_q0;
output  [9:0] Input_39_address0;
output   Input_39_ce0;
input  [31:0] Input_39_q0;
output  [9:0] Input_40_address0;
output   Input_40_ce0;
input  [31:0] Input_40_q0;
output  [9:0] Input_41_address0;
output   Input_41_ce0;
input  [31:0] Input_41_q0;
output  [9:0] Input_42_address0;
output   Input_42_ce0;
input  [31:0] Input_42_q0;
output  [9:0] Input_43_address0;
output   Input_43_ce0;
input  [31:0] Input_43_q0;
output  [9:0] Input_44_address0;
output   Input_44_ce0;
input  [31:0] Input_44_q0;
output  [9:0] Input_45_address0;
output   Input_45_ce0;
input  [31:0] Input_45_q0;
output  [9:0] Input_46_address0;
output   Input_46_ce0;
input  [31:0] Input_46_q0;
output  [9:0] Input_47_address0;
output   Input_47_ce0;
input  [31:0] Input_47_q0;
output  [9:0] Input_48_address0;
output   Input_48_ce0;
input  [31:0] Input_48_q0;
output  [9:0] Input_49_address0;
output   Input_49_ce0;
input  [31:0] Input_49_q0;
output  [9:0] Input_50_address0;
output   Input_50_ce0;
input  [31:0] Input_50_q0;
output  [9:0] Input_51_address0;
output   Input_51_ce0;
input  [31:0] Input_51_q0;
output  [9:0] Input_52_address0;
output   Input_52_ce0;
input  [31:0] Input_52_q0;
output  [9:0] Input_53_address0;
output   Input_53_ce0;
input  [31:0] Input_53_q0;
output  [9:0] Input_54_address0;
output   Input_54_ce0;
input  [31:0] Input_54_q0;
output  [9:0] Input_55_address0;
output   Input_55_ce0;
input  [31:0] Input_55_q0;
output  [9:0] Input_56_address0;
output   Input_56_ce0;
input  [31:0] Input_56_q0;
output  [9:0] Input_57_address0;
output   Input_57_ce0;
input  [31:0] Input_57_q0;
output  [9:0] Input_58_address0;
output   Input_58_ce0;
input  [31:0] Input_58_q0;
output  [9:0] Input_59_address0;
output   Input_59_ce0;
input  [31:0] Input_59_q0;
input  [5:0] trunc_ln;
input  [0:0] IsNL;
input  [4:0] InterSubOutput_cast;
input  [0:0] cmp15;
output  [3:0] local_buf_address0;
output   local_buf_ce0;
output   local_buf_we0;
output  [31:0] local_buf_d0;
output  [15:0] buf_256b_1_0121_out;
output   buf_256b_1_0121_out_ap_vld;
output  [15:0] buf_256b_0_0120_out;
output   buf_256b_0_0120_out_ap_vld;
output  [3:0] bn_local_out;
output   bn_local_out_ap_vld;
output  [3:0] cnt_out;
output   cnt_out_ap_vld;

reg ap_idle;
reg Input_0_ce0;
reg Input_1_ce0;
reg Input_2_ce0;
reg Input_3_ce0;
reg Input_4_ce0;
reg Input_5_ce0;
reg Input_6_ce0;
reg Input_7_ce0;
reg Input_8_ce0;
reg Input_9_ce0;
reg Input_10_ce0;
reg Input_11_ce0;
reg Input_12_ce0;
reg Input_13_ce0;
reg Input_14_ce0;
reg Input_15_ce0;
reg Input_16_ce0;
reg Input_17_ce0;
reg Input_18_ce0;
reg Input_19_ce0;
reg Input_20_ce0;
reg Input_21_ce0;
reg Input_22_ce0;
reg Input_23_ce0;
reg Input_24_ce0;
reg Input_25_ce0;
reg Input_26_ce0;
reg Input_27_ce0;
reg Input_28_ce0;
reg Input_29_ce0;
reg Input_30_ce0;
reg Input_31_ce0;
reg Input_32_ce0;
reg Input_33_ce0;
reg Input_34_ce0;
reg Input_35_ce0;
reg Input_36_ce0;
reg Input_37_ce0;
reg Input_38_ce0;
reg Input_39_ce0;
reg Input_40_ce0;
reg Input_41_ce0;
reg Input_42_ce0;
reg Input_43_ce0;
reg Input_44_ce0;
reg Input_45_ce0;
reg Input_46_ce0;
reg Input_47_ce0;
reg Input_48_ce0;
reg Input_49_ce0;
reg Input_50_ce0;
reg Input_51_ce0;
reg Input_52_ce0;
reg Input_53_ce0;
reg Input_54_ce0;
reg Input_55_ce0;
reg Input_56_ce0;
reg Input_57_ce0;
reg Input_58_ce0;
reg Input_59_ce0;
reg local_buf_ce0;
reg local_buf_we0;
reg buf_256b_1_0121_out_ap_vld;
reg buf_256b_0_0120_out_ap_vld;
reg bn_local_out_ap_vld;
reg cnt_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln182_fu_1099_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] InterSubOutput_cast_cast_fu_1077_p1;
reg   [31:0] InterSubOutput_cast_cast_reg_1468;
reg   [0:0] icmp_ln182_reg_1473;
reg   [0:0] icmp_ln182_reg_1473_pp0_iter1_reg;
reg   [0:0] icmp_ln182_reg_1473_pp0_iter2_reg;
reg   [0:0] icmp_ln182_reg_1473_pp0_iter3_reg;
reg   [0:0] icmp_ln182_reg_1473_pp0_iter4_reg;
reg   [0:0] icmp_ln182_reg_1473_pp0_iter5_reg;
reg   [0:0] icmp_ln182_reg_1473_pp0_iter6_reg;
reg   [0:0] icmp_ln182_reg_1473_pp0_iter7_reg;
reg   [31:0] Input_0_load_reg_1777;
reg   [31:0] Input_1_load_reg_1782;
reg   [31:0] Input_2_load_reg_1787;
reg   [31:0] Input_3_load_reg_1792;
reg   [31:0] Input_4_load_reg_1797;
reg   [31:0] Input_5_load_reg_1802;
reg   [31:0] Input_6_load_reg_1807;
reg   [31:0] Input_7_load_reg_1812;
reg   [31:0] Input_8_load_reg_1817;
reg   [31:0] Input_9_load_reg_1822;
reg   [31:0] Input_10_load_reg_1827;
reg   [31:0] Input_11_load_reg_1832;
reg   [31:0] Input_12_load_reg_1837;
reg   [31:0] Input_13_load_reg_1842;
reg   [31:0] Input_14_load_reg_1847;
reg   [31:0] Input_15_load_reg_1852;
reg   [31:0] Input_16_load_reg_1857;
reg   [31:0] Input_17_load_reg_1862;
reg   [31:0] Input_18_load_reg_1867;
reg   [31:0] Input_19_load_reg_1872;
reg   [31:0] Input_20_load_reg_1877;
reg   [31:0] Input_21_load_reg_1882;
reg   [31:0] Input_22_load_reg_1887;
reg   [31:0] Input_23_load_reg_1892;
reg   [31:0] Input_24_load_reg_1897;
reg   [31:0] Input_25_load_reg_1902;
reg   [31:0] Input_26_load_reg_1907;
reg   [31:0] Input_27_load_reg_1912;
reg   [31:0] Input_28_load_reg_1917;
reg   [31:0] Input_29_load_reg_1922;
reg   [31:0] Input_30_load_reg_1927;
reg   [31:0] Input_31_load_reg_1932;
reg   [31:0] Input_32_load_reg_1937;
reg   [31:0] Input_33_load_reg_1942;
reg   [31:0] Input_34_load_reg_1947;
reg   [31:0] Input_35_load_reg_1952;
reg   [31:0] Input_36_load_reg_1957;
reg   [31:0] Input_37_load_reg_1962;
reg   [31:0] Input_38_load_reg_1967;
reg   [31:0] Input_39_load_reg_1972;
reg   [31:0] Input_40_load_reg_1977;
reg   [31:0] Input_41_load_reg_1982;
reg   [31:0] Input_42_load_reg_1987;
reg   [31:0] Input_43_load_reg_1992;
reg   [31:0] Input_44_load_reg_1997;
reg   [31:0] Input_45_load_reg_2002;
reg   [31:0] Input_46_load_reg_2007;
reg   [31:0] Input_47_load_reg_2012;
reg   [31:0] Input_48_load_reg_2017;
reg   [31:0] Input_49_load_reg_2022;
reg   [31:0] Input_50_load_reg_2027;
reg   [31:0] Input_51_load_reg_2032;
reg   [31:0] Input_52_load_reg_2037;
reg   [31:0] Input_53_load_reg_2042;
reg   [31:0] Input_54_load_reg_2047;
reg   [31:0] Input_55_load_reg_2052;
reg   [31:0] Input_56_load_reg_2057;
reg   [31:0] Input_57_load_reg_2062;
reg   [31:0] Input_58_load_reg_2067;
reg   [31:0] Input_59_load_reg_2072;
wire  signed [31:0] tmp1_fu_1190_p62;
reg  signed [31:0] tmp1_reg_2077;
reg  signed [31:0] tmp1_reg_2077_pp0_iter3_reg;
reg  signed [31:0] tmp1_reg_2077_pp0_iter4_reg;
reg  signed [31:0] tmp1_reg_2077_pp0_iter5_reg;
reg  signed [31:0] tmp1_reg_2077_pp0_iter6_reg;
wire   [3:0] trunc_ln182_1_fu_1267_p1;
reg   [3:0] trunc_ln182_1_reg_2090;
wire   [31:0] tmp_out_2_fu_1299_p3;
reg   [31:0] tmp_out_2_reg_2095;
wire   [0:0] trunc_ln206_fu_1305_p1;
reg   [0:0] trunc_ln206_reg_2101;
reg   [0:0] trunc_ln206_reg_2101_pp0_iter8_reg;
wire   [0:0] icmp_ln209_fu_1315_p2;
reg   [0:0] icmp_ln209_reg_2107;
reg   [0:0] icmp_ln209_reg_2107_pp0_iter8_reg;
reg   [7:0] cnt_2_reg_2111;
wire   [15:0] tmp_int16_fu_1350_p3;
reg   [15:0] tmp_int16_reg_2116;
reg    ap_condition_exit_pp0_iter8_stage0;
wire   [63:0] zext_ln186_1_fu_1121_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln212_fu_1395_p1;
reg   [7:0] tc_fu_200;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_tc_1;
wire   [7:0] tc_2_fu_1105_p2;
reg   [7:0] bn_local_fu_204;
wire   [7:0] bn_local_2_fu_1309_p2;
reg   [15:0] buf_256b_1_fu_208;
wire   [15:0] buf_256b_1_7_fu_1380_p3;
reg   [15:0] buf_256b_1_4_fu_212;
wire   [15:0] buf_256b_1_6_fu_1374_p3;
reg   [7:0] cnt_fu_216;
wire   [7:0] cnt_3_fu_1357_p2;
wire    ap_block_pp0_stage0_01001;
wire   [9:0] zext_ln186_fu_1111_p1;
wire   [9:0] add_ln186_fu_1115_p2;
wire   [12:0] grp_fu_1258_p1;
wire   [44:0] grp_fu_1258_p2;
wire   [29:0] tmp_out_fu_1278_p4;
wire   [0:0] tmp_fu_1271_p3;
wire  signed [31:0] sext_ln191_1_fu_1288_p1;
wire   [31:0] tmp_out_1_fu_1292_p3;
wire   [31:0] ashr_ln200_fu_1339_p2;
wire   [15:0] trunc_ln198_fu_1343_p1;
wire   [15:0] trunc_ln198_1_fu_1347_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_1062;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

FPGA_Acc_mux_606_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_606_32_1_1_U1313(
    .din0(Input_0_load_reg_1777),
    .din1(Input_1_load_reg_1782),
    .din2(Input_2_load_reg_1787),
    .din3(Input_3_load_reg_1792),
    .din4(Input_4_load_reg_1797),
    .din5(Input_5_load_reg_1802),
    .din6(Input_6_load_reg_1807),
    .din7(Input_7_load_reg_1812),
    .din8(Input_8_load_reg_1817),
    .din9(Input_9_load_reg_1822),
    .din10(Input_10_load_reg_1827),
    .din11(Input_11_load_reg_1832),
    .din12(Input_12_load_reg_1837),
    .din13(Input_13_load_reg_1842),
    .din14(Input_14_load_reg_1847),
    .din15(Input_15_load_reg_1852),
    .din16(Input_16_load_reg_1857),
    .din17(Input_17_load_reg_1862),
    .din18(Input_18_load_reg_1867),
    .din19(Input_19_load_reg_1872),
    .din20(Input_20_load_reg_1877),
    .din21(Input_21_load_reg_1882),
    .din22(Input_22_load_reg_1887),
    .din23(Input_23_load_reg_1892),
    .din24(Input_24_load_reg_1897),
    .din25(Input_25_load_reg_1902),
    .din26(Input_26_load_reg_1907),
    .din27(Input_27_load_reg_1912),
    .din28(Input_28_load_reg_1917),
    .din29(Input_29_load_reg_1922),
    .din30(Input_30_load_reg_1927),
    .din31(Input_31_load_reg_1932),
    .din32(Input_32_load_reg_1937),
    .din33(Input_33_load_reg_1942),
    .din34(Input_34_load_reg_1947),
    .din35(Input_35_load_reg_1952),
    .din36(Input_36_load_reg_1957),
    .din37(Input_37_load_reg_1962),
    .din38(Input_38_load_reg_1967),
    .din39(Input_39_load_reg_1972),
    .din40(Input_40_load_reg_1977),
    .din41(Input_41_load_reg_1982),
    .din42(Input_42_load_reg_1987),
    .din43(Input_43_load_reg_1992),
    .din44(Input_44_load_reg_1997),
    .din45(Input_45_load_reg_2002),
    .din46(Input_46_load_reg_2007),
    .din47(Input_47_load_reg_2012),
    .din48(Input_48_load_reg_2017),
    .din49(Input_49_load_reg_2022),
    .din50(Input_50_load_reg_2027),
    .din51(Input_51_load_reg_2032),
    .din52(Input_52_load_reg_2037),
    .din53(Input_53_load_reg_2042),
    .din54(Input_54_load_reg_2047),
    .din55(Input_55_load_reg_2052),
    .din56(Input_56_load_reg_2057),
    .din57(Input_57_load_reg_2062),
    .din58(Input_58_load_reg_2067),
    .din59(Input_59_load_reg_2072),
    .din60(trunc_ln),
    .dout(tmp1_fu_1190_p62)
);

FPGA_Acc_mul_32s_13ns_45_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 45 ))
mul_32s_13ns_45_5_1_U1314(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp1_reg_2077),
    .din1(grp_fu_1258_p1),
    .ce(1'b1),
    .dout(grp_fu_1258_p2)
);

FPGA_Acc_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter8_stage0)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln209_fu_1315_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_reg_1473_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bn_local_fu_204 <= 8'd0;
    end else if (((icmp_ln209_fu_1315_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_reg_1473_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        bn_local_fu_204 <= bn_local_2_fu_1309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cnt_fu_216 <= 8'd0;
        end else if ((1'b1 == ap_condition_1062)) begin
            cnt_fu_216 <= cnt_3_fu_1357_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln182_fu_1099_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            tc_fu_200 <= tc_2_fu_1105_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            tc_fu_200 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_reg_1473 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_0_load_reg_1777 <= Input_0_q0;
        Input_10_load_reg_1827 <= Input_10_q0;
        Input_11_load_reg_1832 <= Input_11_q0;
        Input_12_load_reg_1837 <= Input_12_q0;
        Input_13_load_reg_1842 <= Input_13_q0;
        Input_14_load_reg_1847 <= Input_14_q0;
        Input_15_load_reg_1852 <= Input_15_q0;
        Input_16_load_reg_1857 <= Input_16_q0;
        Input_17_load_reg_1862 <= Input_17_q0;
        Input_18_load_reg_1867 <= Input_18_q0;
        Input_19_load_reg_1872 <= Input_19_q0;
        Input_1_load_reg_1782 <= Input_1_q0;
        Input_20_load_reg_1877 <= Input_20_q0;
        Input_21_load_reg_1882 <= Input_21_q0;
        Input_22_load_reg_1887 <= Input_22_q0;
        Input_23_load_reg_1892 <= Input_23_q0;
        Input_24_load_reg_1897 <= Input_24_q0;
        Input_25_load_reg_1902 <= Input_25_q0;
        Input_26_load_reg_1907 <= Input_26_q0;
        Input_27_load_reg_1912 <= Input_27_q0;
        Input_28_load_reg_1917 <= Input_28_q0;
        Input_29_load_reg_1922 <= Input_29_q0;
        Input_2_load_reg_1787 <= Input_2_q0;
        Input_30_load_reg_1927 <= Input_30_q0;
        Input_31_load_reg_1932 <= Input_31_q0;
        Input_32_load_reg_1937 <= Input_32_q0;
        Input_33_load_reg_1942 <= Input_33_q0;
        Input_34_load_reg_1947 <= Input_34_q0;
        Input_35_load_reg_1952 <= Input_35_q0;
        Input_36_load_reg_1957 <= Input_36_q0;
        Input_37_load_reg_1962 <= Input_37_q0;
        Input_38_load_reg_1967 <= Input_38_q0;
        Input_39_load_reg_1972 <= Input_39_q0;
        Input_3_load_reg_1792 <= Input_3_q0;
        Input_40_load_reg_1977 <= Input_40_q0;
        Input_41_load_reg_1982 <= Input_41_q0;
        Input_42_load_reg_1987 <= Input_42_q0;
        Input_43_load_reg_1992 <= Input_43_q0;
        Input_44_load_reg_1997 <= Input_44_q0;
        Input_45_load_reg_2002 <= Input_45_q0;
        Input_46_load_reg_2007 <= Input_46_q0;
        Input_47_load_reg_2012 <= Input_47_q0;
        Input_48_load_reg_2017 <= Input_48_q0;
        Input_49_load_reg_2022 <= Input_49_q0;
        Input_4_load_reg_1797 <= Input_4_q0;
        Input_50_load_reg_2027 <= Input_50_q0;
        Input_51_load_reg_2032 <= Input_51_q0;
        Input_52_load_reg_2037 <= Input_52_q0;
        Input_53_load_reg_2042 <= Input_53_q0;
        Input_54_load_reg_2047 <= Input_54_q0;
        Input_55_load_reg_2052 <= Input_55_q0;
        Input_56_load_reg_2057 <= Input_56_q0;
        Input_57_load_reg_2062 <= Input_57_q0;
        Input_58_load_reg_2067 <= Input_58_q0;
        Input_59_load_reg_2072 <= Input_59_q0;
        Input_5_load_reg_1802 <= Input_5_q0;
        Input_6_load_reg_1807 <= Input_6_q0;
        Input_7_load_reg_1812 <= Input_7_q0;
        Input_8_load_reg_1817 <= Input_8_q0;
        Input_9_load_reg_1822 <= Input_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        InterSubOutput_cast_cast_reg_1468[4 : 0] <= InterSubOutput_cast_cast_fu_1077_p1[4 : 0];
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln182_reg_1473 <= icmp_ln182_fu_1099_p2;
        icmp_ln182_reg_1473_pp0_iter1_reg <= icmp_ln182_reg_1473;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        cnt_2_reg_2111 <= cnt_fu_216;
        icmp_ln182_reg_1473_pp0_iter2_reg <= icmp_ln182_reg_1473_pp0_iter1_reg;
        icmp_ln182_reg_1473_pp0_iter3_reg <= icmp_ln182_reg_1473_pp0_iter2_reg;
        icmp_ln182_reg_1473_pp0_iter4_reg <= icmp_ln182_reg_1473_pp0_iter3_reg;
        icmp_ln182_reg_1473_pp0_iter5_reg <= icmp_ln182_reg_1473_pp0_iter4_reg;
        icmp_ln182_reg_1473_pp0_iter6_reg <= icmp_ln182_reg_1473_pp0_iter5_reg;
        icmp_ln182_reg_1473_pp0_iter7_reg <= icmp_ln182_reg_1473_pp0_iter6_reg;
        icmp_ln209_reg_2107_pp0_iter8_reg <= icmp_ln209_reg_2107;
        tmp1_reg_2077_pp0_iter3_reg <= tmp1_reg_2077;
        tmp1_reg_2077_pp0_iter4_reg <= tmp1_reg_2077_pp0_iter3_reg;
        tmp1_reg_2077_pp0_iter5_reg <= tmp1_reg_2077_pp0_iter4_reg;
        tmp1_reg_2077_pp0_iter6_reg <= tmp1_reg_2077_pp0_iter5_reg;
        trunc_ln206_reg_2101_pp0_iter8_reg <= trunc_ln206_reg_2101;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buf_256b_1_4_fu_212 <= buf_256b_1_6_fu_1374_p3;
        buf_256b_1_fu_208 <= buf_256b_1_7_fu_1380_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_reg_1473_pp0_iter6_reg == 1'd0))) begin
        icmp_ln209_reg_2107 <= icmp_ln209_fu_1315_p2;
        tmp_out_2_reg_2095 <= tmp_out_2_fu_1299_p3;
        trunc_ln206_reg_2101 <= trunc_ln206_fu_1305_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_reg_1473_pp0_iter1_reg == 1'd0))) begin
        tmp1_reg_2077 <= tmp1_fu_1190_p62;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_reg_1473_pp0_iter7_reg == 1'd0))) begin
        tmp_int16_reg_2116 <= tmp_int16_fu_1350_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        trunc_ln182_1_reg_2090 <= trunc_ln182_1_fu_1267_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_0_ce0 = 1'b1;
    end else begin
        Input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_10_ce0 = 1'b1;
    end else begin
        Input_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_11_ce0 = 1'b1;
    end else begin
        Input_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_12_ce0 = 1'b1;
    end else begin
        Input_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_13_ce0 = 1'b1;
    end else begin
        Input_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_14_ce0 = 1'b1;
    end else begin
        Input_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_15_ce0 = 1'b1;
    end else begin
        Input_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_16_ce0 = 1'b1;
    end else begin
        Input_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_17_ce0 = 1'b1;
    end else begin
        Input_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_18_ce0 = 1'b1;
    end else begin
        Input_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_19_ce0 = 1'b1;
    end else begin
        Input_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_1_ce0 = 1'b1;
    end else begin
        Input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_20_ce0 = 1'b1;
    end else begin
        Input_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_21_ce0 = 1'b1;
    end else begin
        Input_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_22_ce0 = 1'b1;
    end else begin
        Input_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_23_ce0 = 1'b1;
    end else begin
        Input_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_24_ce0 = 1'b1;
    end else begin
        Input_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_25_ce0 = 1'b1;
    end else begin
        Input_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_26_ce0 = 1'b1;
    end else begin
        Input_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_27_ce0 = 1'b1;
    end else begin
        Input_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_28_ce0 = 1'b1;
    end else begin
        Input_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_29_ce0 = 1'b1;
    end else begin
        Input_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_2_ce0 = 1'b1;
    end else begin
        Input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_30_ce0 = 1'b1;
    end else begin
        Input_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_31_ce0 = 1'b1;
    end else begin
        Input_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_32_ce0 = 1'b1;
    end else begin
        Input_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_33_ce0 = 1'b1;
    end else begin
        Input_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_34_ce0 = 1'b1;
    end else begin
        Input_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_35_ce0 = 1'b1;
    end else begin
        Input_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_36_ce0 = 1'b1;
    end else begin
        Input_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_37_ce0 = 1'b1;
    end else begin
        Input_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_38_ce0 = 1'b1;
    end else begin
        Input_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_39_ce0 = 1'b1;
    end else begin
        Input_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_3_ce0 = 1'b1;
    end else begin
        Input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_40_ce0 = 1'b1;
    end else begin
        Input_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_41_ce0 = 1'b1;
    end else begin
        Input_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_42_ce0 = 1'b1;
    end else begin
        Input_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_43_ce0 = 1'b1;
    end else begin
        Input_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_44_ce0 = 1'b1;
    end else begin
        Input_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_45_ce0 = 1'b1;
    end else begin
        Input_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_46_ce0 = 1'b1;
    end else begin
        Input_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_47_ce0 = 1'b1;
    end else begin
        Input_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_48_ce0 = 1'b1;
    end else begin
        Input_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_49_ce0 = 1'b1;
    end else begin
        Input_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_4_ce0 = 1'b1;
    end else begin
        Input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_50_ce0 = 1'b1;
    end else begin
        Input_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_51_ce0 = 1'b1;
    end else begin
        Input_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_52_ce0 = 1'b1;
    end else begin
        Input_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_53_ce0 = 1'b1;
    end else begin
        Input_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_54_ce0 = 1'b1;
    end else begin
        Input_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_55_ce0 = 1'b1;
    end else begin
        Input_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_56_ce0 = 1'b1;
    end else begin
        Input_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_57_ce0 = 1'b1;
    end else begin
        Input_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_58_ce0 = 1'b1;
    end else begin
        Input_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_59_ce0 = 1'b1;
    end else begin
        Input_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_5_ce0 = 1'b1;
    end else begin
        Input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_6_ce0 = 1'b1;
    end else begin
        Input_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_7_ce0 = 1'b1;
    end else begin
        Input_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_8_ce0 = 1'b1;
    end else begin
        Input_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_9_ce0 = 1'b1;
    end else begin
        Input_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln182_fu_1099_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln182_reg_1473_pp0_iter7_reg == 1'd1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ap_condition_exit_pp0_iter8_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter8_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_tc_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_tc_1 = tc_fu_200;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_reg_1473_pp0_iter7_reg == 1'd1))) begin
        bn_local_out_ap_vld = 1'b1;
    end else begin
        bn_local_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_reg_1473_pp0_iter7_reg == 1'd1))) begin
        buf_256b_0_0120_out_ap_vld = 1'b1;
    end else begin
        buf_256b_0_0120_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_reg_1473_pp0_iter7_reg == 1'd1))) begin
        buf_256b_1_0121_out_ap_vld = 1'b1;
    end else begin
        buf_256b_1_0121_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_reg_1473_pp0_iter7_reg == 1'd1))) begin
        cnt_out_ap_vld = 1'b1;
    end else begin
        cnt_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        local_buf_ce0 = 1'b1;
    end else begin
        local_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln209_reg_2107_pp0_iter8_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        local_buf_we0 = 1'b1;
    end else begin
        local_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_0_address0 = zext_ln186_1_fu_1121_p1;

assign Input_10_address0 = zext_ln186_1_fu_1121_p1;

assign Input_11_address0 = zext_ln186_1_fu_1121_p1;

assign Input_12_address0 = zext_ln186_1_fu_1121_p1;

assign Input_13_address0 = zext_ln186_1_fu_1121_p1;

assign Input_14_address0 = zext_ln186_1_fu_1121_p1;

assign Input_15_address0 = zext_ln186_1_fu_1121_p1;

assign Input_16_address0 = zext_ln186_1_fu_1121_p1;

assign Input_17_address0 = zext_ln186_1_fu_1121_p1;

assign Input_18_address0 = zext_ln186_1_fu_1121_p1;

assign Input_19_address0 = zext_ln186_1_fu_1121_p1;

assign Input_1_address0 = zext_ln186_1_fu_1121_p1;

assign Input_20_address0 = zext_ln186_1_fu_1121_p1;

assign Input_21_address0 = zext_ln186_1_fu_1121_p1;

assign Input_22_address0 = zext_ln186_1_fu_1121_p1;

assign Input_23_address0 = zext_ln186_1_fu_1121_p1;

assign Input_24_address0 = zext_ln186_1_fu_1121_p1;

assign Input_25_address0 = zext_ln186_1_fu_1121_p1;

assign Input_26_address0 = zext_ln186_1_fu_1121_p1;

assign Input_27_address0 = zext_ln186_1_fu_1121_p1;

assign Input_28_address0 = zext_ln186_1_fu_1121_p1;

assign Input_29_address0 = zext_ln186_1_fu_1121_p1;

assign Input_2_address0 = zext_ln186_1_fu_1121_p1;

assign Input_30_address0 = zext_ln186_1_fu_1121_p1;

assign Input_31_address0 = zext_ln186_1_fu_1121_p1;

assign Input_32_address0 = zext_ln186_1_fu_1121_p1;

assign Input_33_address0 = zext_ln186_1_fu_1121_p1;

assign Input_34_address0 = zext_ln186_1_fu_1121_p1;

assign Input_35_address0 = zext_ln186_1_fu_1121_p1;

assign Input_36_address0 = zext_ln186_1_fu_1121_p1;

assign Input_37_address0 = zext_ln186_1_fu_1121_p1;

assign Input_38_address0 = zext_ln186_1_fu_1121_p1;

assign Input_39_address0 = zext_ln186_1_fu_1121_p1;

assign Input_3_address0 = zext_ln186_1_fu_1121_p1;

assign Input_40_address0 = zext_ln186_1_fu_1121_p1;

assign Input_41_address0 = zext_ln186_1_fu_1121_p1;

assign Input_42_address0 = zext_ln186_1_fu_1121_p1;

assign Input_43_address0 = zext_ln186_1_fu_1121_p1;

assign Input_44_address0 = zext_ln186_1_fu_1121_p1;

assign Input_45_address0 = zext_ln186_1_fu_1121_p1;

assign Input_46_address0 = zext_ln186_1_fu_1121_p1;

assign Input_47_address0 = zext_ln186_1_fu_1121_p1;

assign Input_48_address0 = zext_ln186_1_fu_1121_p1;

assign Input_49_address0 = zext_ln186_1_fu_1121_p1;

assign Input_4_address0 = zext_ln186_1_fu_1121_p1;

assign Input_50_address0 = zext_ln186_1_fu_1121_p1;

assign Input_51_address0 = zext_ln186_1_fu_1121_p1;

assign Input_52_address0 = zext_ln186_1_fu_1121_p1;

assign Input_53_address0 = zext_ln186_1_fu_1121_p1;

assign Input_54_address0 = zext_ln186_1_fu_1121_p1;

assign Input_55_address0 = zext_ln186_1_fu_1121_p1;

assign Input_56_address0 = zext_ln186_1_fu_1121_p1;

assign Input_57_address0 = zext_ln186_1_fu_1121_p1;

assign Input_58_address0 = zext_ln186_1_fu_1121_p1;

assign Input_59_address0 = zext_ln186_1_fu_1121_p1;

assign Input_5_address0 = zext_ln186_1_fu_1121_p1;

assign Input_6_address0 = zext_ln186_1_fu_1121_p1;

assign Input_7_address0 = zext_ln186_1_fu_1121_p1;

assign Input_8_address0 = zext_ln186_1_fu_1121_p1;

assign Input_9_address0 = zext_ln186_1_fu_1121_p1;

assign InterSubOutput_cast_cast_fu_1077_p1 = InterSubOutput_cast;

assign add_ln186_fu_1115_p2 = (mul_ln186 + zext_ln186_fu_1111_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1062 = ((icmp_ln209_reg_2107 == 1'd1) & (icmp_ln182_reg_1473_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln200_fu_1339_p2 = $signed(tmp_out_2_reg_2095) >>> InterSubOutput_cast_cast_reg_1468;

assign bn_local_2_fu_1309_p2 = (bn_local_fu_204 + 8'd1);

assign bn_local_out = trunc_ln182_1_reg_2090;

assign buf_256b_0_0120_out = buf_256b_1_fu_208;

assign buf_256b_1_0121_out = buf_256b_1_4_fu_212;

assign buf_256b_1_6_fu_1374_p3 = ((trunc_ln206_reg_2101_pp0_iter8_reg[0:0] == 1'b1) ? tmp_int16_reg_2116 : buf_256b_1_4_fu_212);

assign buf_256b_1_7_fu_1380_p3 = ((trunc_ln206_reg_2101_pp0_iter8_reg[0:0] == 1'b1) ? buf_256b_1_fu_208 : tmp_int16_reg_2116);

assign cnt_3_fu_1357_p2 = (cnt_fu_216 + 8'd1);

assign cnt_out = cnt_fu_216[3:0];

assign grp_fu_1258_p1 = 45'd3276;

assign icmp_ln182_fu_1099_p2 = ((ap_sig_allocacmp_tc_1 == TC_MIN) ? 1'b1 : 1'b0);

assign icmp_ln209_fu_1315_p2 = ((bn_local_2_fu_1309_p2 == 8'd2) ? 1'b1 : 1'b0);

assign local_buf_address0 = zext_ln212_fu_1395_p1;

assign local_buf_d0 = {{buf_256b_1_6_fu_1374_p3}, {buf_256b_1_7_fu_1380_p3}};

assign sext_ln191_1_fu_1288_p1 = $signed(tmp_out_fu_1278_p4);

assign tc_2_fu_1105_p2 = (ap_sig_allocacmp_tc_1 + 8'd1);

assign tmp_fu_1271_p3 = tmp1_reg_2077_pp0_iter6_reg[32'd31];

assign tmp_int16_fu_1350_p3 = ((cmp15[0:0] == 1'b1) ? trunc_ln198_fu_1343_p1 : trunc_ln198_1_fu_1347_p1);

assign tmp_out_1_fu_1292_p3 = ((tmp_fu_1271_p3[0:0] == 1'b1) ? sext_ln191_1_fu_1288_p1 : tmp1_reg_2077_pp0_iter6_reg);

assign tmp_out_2_fu_1299_p3 = ((IsNL[0:0] == 1'b1) ? tmp_out_1_fu_1292_p3 : tmp1_reg_2077_pp0_iter6_reg);

assign tmp_out_fu_1278_p4 = {{grp_fu_1258_p2[44:15]}};

assign trunc_ln182_1_fu_1267_p1 = bn_local_fu_204[3:0];

assign trunc_ln198_1_fu_1347_p1 = tmp_out_2_reg_2095[15:0];

assign trunc_ln198_fu_1343_p1 = ashr_ln200_fu_1339_p2[15:0];

assign trunc_ln206_fu_1305_p1 = bn_local_fu_204[0:0];

assign zext_ln186_1_fu_1121_p1 = add_ln186_fu_1115_p2;

assign zext_ln186_fu_1111_p1 = ap_sig_allocacmp_tc_1;

assign zext_ln212_fu_1395_p1 = cnt_2_reg_2111;

always @ (posedge ap_clk) begin
    InterSubOutput_cast_cast_reg_1468[31:5] <= 27'b000000000000000000000000000;
end

endmodule //FPGA_Acc_nonlinear_leaky_row_Pipeline_VITIS_LOOP_182_1
