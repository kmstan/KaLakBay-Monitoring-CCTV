// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FPGA_Acc_maxpool_tile5_Pipeline_VITIS_LOOP_336_1_VITIS_LOOP_340_3_VITIS_LOOP_342_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        zext_ln336,
        K_1,
        mul_ln336_2,
        mul_ln336_1,
        cmp40_not_mid157,
        Ksize,
        icmp_ln342_1,
        mul_ln336,
        icmp_ln340,
        Output_r_address0,
        Output_r_ce0,
        Output_r_we0,
        Output_r_d0,
        Output2_address0,
        Output2_ce0,
        Output2_we0,
        Output2_d0,
        Input_r_address0,
        Input_r_ce0,
        Input_r_q0,
        Input1_address0,
        Input1_ce0,
        Input1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] empty;
input  [1:0] zext_ln336;
input  [7:0] K_1;
input  [31:0] mul_ln336_2;
input  [23:0] mul_ln336_1;
input  [0:0] cmp40_not_mid157;
input  [7:0] Ksize;
input  [0:0] icmp_ln342_1;
input  [15:0] mul_ln336;
input  [0:0] icmp_ln340;
output  [9:0] Output_r_address0;
output   Output_r_ce0;
output   Output_r_we0;
output  [31:0] Output_r_d0;
output  [9:0] Output2_address0;
output   Output2_ce0;
output   Output2_we0;
output  [31:0] Output2_d0;
output  [11:0] Input_r_address0;
output   Input_r_ce0;
input  [15:0] Input_r_q0;
output  [11:0] Input1_address0;
output   Input1_ce0;
input  [15:0] Input1_q0;

reg ap_idle;
reg Output_r_ce0;
reg Output_r_we0;
reg Output2_ce0;
reg Output2_we0;
reg Input_r_ce0;
reg Input1_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln336_fu_294_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] zext_ln336_cast_fu_236_p1;
reg   [9:0] zext_ln336_cast_reg_856;
wire   [5:0] p_cast_fu_240_p1;
reg   [5:0] p_cast_reg_862;
wire   [5:0] mul_cast_fu_289_p2;
reg   [5:0] mul_cast_reg_868;
reg   [0:0] icmp_ln336_reg_874;
reg   [0:0] icmp_ln336_reg_874_pp0_iter2_reg;
wire   [0:0] icmp_ln338_fu_317_p2;
reg   [0:0] icmp_ln338_reg_878;
reg   [0:0] icmp_ln338_reg_878_pp0_iter2_reg;
reg   [0:0] icmp_ln338_reg_878_pp0_iter3_reg;
wire   [5:0] mul_cast_mid1_fu_326_p2;
reg   [5:0] mul_cast_mid1_reg_889;
wire   [7:0] select_ln332_2_fu_331_p3;
reg   [7:0] select_ln332_2_reg_895;
wire   [0:0] select_ln332_7_fu_344_p3;
reg   [0:0] select_ln332_7_reg_900;
reg   [0:0] select_ln332_7_reg_900_pp0_iter2_reg;
reg   [0:0] select_ln332_7_reg_900_pp0_iter3_reg;
wire   [0:0] or_ln338_fu_351_p2;
reg   [0:0] or_ln338_reg_910;
reg   [7:0] tc_4_reg_915;
wire   [7:0] tc_5_fu_472_p2;
reg   [7:0] tc_5_reg_925;
wire   [7:0] select_ln338_2_fu_485_p3;
reg   [7:0] select_ln338_2_reg_930;
reg   [7:0] select_ln338_2_reg_930_pp0_iter3_reg;
wire   [0:0] select_ln338_4_fu_499_p3;
reg   [0:0] select_ln338_4_reg_935;
wire   [0:0] select_ln338_5_fu_505_p3;
reg   [0:0] select_ln338_5_reg_940;
wire   [7:0] i_3_fu_511_p2;
reg   [7:0] i_3_reg_945;
wire   [7:0] select_ln340_fu_527_p3;
reg   [7:0] select_ln340_reg_950;
reg   [7:0] select_ln340_reg_950_pp0_iter3_reg;
wire   [7:0] select_ln340_3_fu_557_p3;
reg   [7:0] select_ln340_3_reg_962;
wire   [9:0] mul26_fu_589_p2;
reg   [9:0] mul26_reg_967;
wire   [9:0] mul26_mid1_fu_597_p2;
reg   [9:0] mul26_mid1_reg_972;
wire   [0:0] empty_71_fu_616_p2;
reg   [0:0] empty_71_reg_977;
reg   [0:0] empty_71_reg_977_pp0_iter4_reg;
reg   [0:0] empty_71_reg_977_pp0_iter5_reg;
reg   [0:0] empty_71_reg_977_pp0_iter6_reg;
wire   [0:0] brmerge22_fu_626_p2;
reg   [0:0] brmerge22_reg_983;
reg   [0:0] brmerge22_reg_983_pp0_iter4_reg;
reg   [0:0] brmerge22_reg_983_pp0_iter5_reg;
reg   [0:0] brmerge22_reg_983_pp0_iter6_reg;
reg   [0:0] brmerge22_reg_983_pp0_iter7_reg;
wire   [9:0] grp_fu_732_p3;
reg   [9:0] add_ln357_reg_997;
reg   [9:0] add_ln357_reg_997_pp0_iter6_reg;
reg   [9:0] add_ln357_reg_997_pp0_iter7_reg;
reg   [15:0] tmp_0_reg_1012;
reg   [15:0] tmp_1_reg_1018;
wire  signed [15:0] tmp_0_3_fu_680_p3;
reg  signed [15:0] tmp_0_3_reg_1024;
wire  signed [15:0] tmp_1_3_fu_702_p3;
reg  signed [15:0] tmp_1_3_reg_1029;
reg    ap_condition_exit_pp0_iter3_stage0;
wire   [63:0] zext_ln351_2_fu_660_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln357_1_fu_719_p1;
reg   [7:0] j_fu_88;
wire   [7:0] j_1_fu_565_p2;
wire    ap_loop_init;
reg   [15:0] tmp_0_2_fu_92;
reg   [15:0] tmp_1_2_fu_96;
reg   [7:0] i_fu_100;
reg   [15:0] indvar_flatten_fu_104;
wire   [15:0] select_ln340_4_fu_369_p3;
reg   [7:0] tc_fu_108;
reg   [23:0] indvar_flatten25_fu_112;
wire   [23:0] select_ln338_6_fu_383_p3;
reg   [7:0] tr_fu_116;
reg   [31:0] indvar_flatten65_fu_120;
wire   [31:0] add_ln336_fu_299_p2;
wire  signed [5:0] mul_cast_fu_289_p0;
wire   [1:0] mul_cast_fu_289_p1;
wire   [7:0] tr_5_fu_311_p2;
wire  signed [5:0] mul_cast_mid1_fu_326_p0;
wire   [1:0] mul_cast_mid1_fu_326_p1;
wire   [0:0] icmp_ln340_1_fu_339_p2;
wire   [15:0] add_ln340_1_fu_363_p2;
wire   [23:0] add_ln338_1_fu_377_p2;
wire   [5:0] trunc_ln340_fu_417_p1;
wire   [5:0] add_fu_421_p2;
wire   [0:0] cmp40_not_fu_426_p2;
wire   [0:0] icmp_ln342_fu_461_p2;
wire   [7:0] select_ln332_fu_434_p3;
wire   [5:0] select_ln332_1_fu_441_p3;
wire   [5:0] select_ln332_4_fu_449_p3;
wire   [0:0] select_ln332_5_fu_455_p3;
wire   [0:0] select_ln332_6_fu_466_p3;
wire   [7:0] select_ln338_fu_478_p3;
wire   [0:0] or_ln340_fu_517_p2;
wire   [0:0] or_ln340_1_fu_522_p2;
wire   [5:0] trunc_ln340_1_fu_535_p1;
wire   [5:0] add_mid1_fu_539_p2;
wire   [5:0] select_ln338_3_fu_492_p3;
wire   [5:0] select_ln340_1_fu_545_p3;
wire   [7:0] mul26_fu_589_p0;
wire   [1:0] mul26_fu_589_p1;
wire   [7:0] mul26_mid1_fu_597_p0;
wire   [1:0] mul26_mid1_fu_597_p1;
wire   [0:0] cmp40_not_mid1_fu_602_p2;
wire   [7:0] empty_70_fu_612_p2;
wire   [0:0] select_ln340_2_fu_606_p3;
wire   [0:0] cmp43_not_fu_622_p2;
wire   [9:0] select_ln332_3_fu_632_p3;
wire   [9:0] select_ln338_1_fu_638_p3;
wire   [9:0] zext_ln342_fu_647_p1;
wire   [9:0] add28_fu_650_p2;
wire   [11:0] grp_fu_740_p3;
wire   [15:0] select_ln348_fu_668_p3;
wire   [0:0] icmp_ln353_fu_675_p2;
wire   [15:0] select_ln348_1_fu_690_p3;
wire   [0:0] icmp_ln353_1_fu_697_p2;
wire   [7:0] grp_fu_732_p0;
wire   [4:0] grp_fu_732_p1;
wire   [7:0] grp_fu_732_p2;
wire   [5:0] grp_fu_740_p0;
wire   [5:0] grp_fu_740_p1;
wire   [9:0] grp_fu_740_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [9:0] grp_fu_732_p00;
wire   [9:0] grp_fu_732_p20;
wire   [11:0] grp_fu_740_p00;
wire   [11:0] grp_fu_740_p20;
wire   [9:0] mul26_fu_589_p00;
wire   [9:0] mul26_mid1_fu_597_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_done_reg = 1'b0;
end

FPGA_Acc_mul_6s_2ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mul_6s_2ns_6_1_1_U477(
    .din0(mul_cast_fu_289_p0),
    .din1(mul_cast_fu_289_p1),
    .dout(mul_cast_fu_289_p2)
);

FPGA_Acc_mul_6s_2ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mul_6s_2ns_6_1_1_U478(
    .din0(mul_cast_mid1_fu_326_p0),
    .din1(mul_cast_mid1_fu_326_p1),
    .dout(mul_cast_mid1_fu_326_p2)
);

FPGA_Acc_mul_8ns_2ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
mul_8ns_2ns_10_1_1_U479(
    .din0(mul26_fu_589_p0),
    .din1(mul26_fu_589_p1),
    .dout(mul26_fu_589_p2)
);

FPGA_Acc_mul_8ns_2ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
mul_8ns_2ns_10_1_1_U480(
    .din0(mul26_mid1_fu_597_p0),
    .din1(mul26_mid1_fu_597_p1),
    .dout(mul26_mid1_fu_597_p2)
);

FPGA_Acc_mac_muladd_8ns_5ns_8ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
mac_muladd_8ns_5ns_8ns_10_4_1_U481(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_732_p0),
    .din1(grp_fu_732_p1),
    .din2(grp_fu_732_p2),
    .ce(1'b1),
    .dout(grp_fu_732_p3)
);

FPGA_Acc_mac_muladd_6ns_6ns_10ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mac_muladd_6ns_6ns_10ns_12_4_1_U482(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_740_p0),
    .din1(grp_fu_740_p1),
    .din2(grp_fu_740_p2),
    .ce(1'b1),
    .dout(grp_fu_740_p3)
);

FPGA_Acc_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_fu_100 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_reg_874 == 1'd0))) begin
            i_fu_100 <= select_ln340_3_fu_557_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten25_fu_112 <= 24'd0;
        end else if (((icmp_ln336_fu_294_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten25_fu_112 <= select_ln338_6_fu_383_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten65_fu_120 <= 32'd0;
        end else if (((icmp_ln336_fu_294_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten65_fu_120 <= add_ln336_fu_299_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_104 <= 16'd0;
        end else if (((icmp_ln336_fu_294_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_104 <= select_ln340_4_fu_369_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_88 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_reg_874 == 1'd0))) begin
            j_fu_88 <= j_1_fu_565_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tc_fu_108 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_reg_874 == 1'd0))) begin
            tc_fu_108 <= select_ln338_2_fu_485_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tr_fu_116 <= 8'd0;
        end else if (((icmp_ln336_fu_294_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            tr_fu_116 <= select_ln332_2_fu_331_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        add_ln357_reg_997 <= grp_fu_732_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln357_reg_997_pp0_iter6_reg <= add_ln357_reg_997;
        add_ln357_reg_997_pp0_iter7_reg <= add_ln357_reg_997_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        brmerge22_reg_983_pp0_iter4_reg <= brmerge22_reg_983;
        brmerge22_reg_983_pp0_iter5_reg <= brmerge22_reg_983_pp0_iter4_reg;
        brmerge22_reg_983_pp0_iter6_reg <= brmerge22_reg_983_pp0_iter5_reg;
        brmerge22_reg_983_pp0_iter7_reg <= brmerge22_reg_983_pp0_iter6_reg;
        empty_71_reg_977_pp0_iter4_reg <= empty_71_reg_977;
        empty_71_reg_977_pp0_iter5_reg <= empty_71_reg_977_pp0_iter4_reg;
        empty_71_reg_977_pp0_iter6_reg <= empty_71_reg_977_pp0_iter5_reg;
        icmp_ln336_reg_874_pp0_iter2_reg <= icmp_ln336_reg_874;
        icmp_ln338_reg_878_pp0_iter2_reg <= icmp_ln338_reg_878;
        icmp_ln338_reg_878_pp0_iter3_reg <= icmp_ln338_reg_878_pp0_iter2_reg;
        select_ln332_7_reg_900_pp0_iter2_reg <= select_ln332_7_reg_900;
        select_ln332_7_reg_900_pp0_iter3_reg <= select_ln332_7_reg_900_pp0_iter2_reg;
        select_ln338_2_reg_930_pp0_iter3_reg <= select_ln338_2_reg_930;
        select_ln340_reg_950_pp0_iter3_reg <= select_ln340_reg_950;
        tc_4_reg_915 <= tc_fu_108;
        tmp_0_3_reg_1024 <= tmp_0_3_fu_680_p3;
        tmp_0_reg_1012 <= Input_r_q0;
        tmp_1_3_reg_1029 <= tmp_1_3_fu_702_p3;
        tmp_1_reg_1018 <= Input1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln336_reg_874 <= icmp_ln336_fu_294_p2;
        mul_cast_reg_868 <= mul_cast_fu_289_p2;
        p_cast_reg_862[1 : 0] <= p_cast_fu_240_p1[1 : 0];
        zext_ln336_cast_reg_856[1 : 0] <= zext_ln336_cast_fu_236_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln336_reg_874_pp0_iter2_reg == 1'd0))) begin
        brmerge22_reg_983 <= brmerge22_fu_626_p2;
        empty_71_reg_977 <= empty_71_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln336_reg_874 == 1'd0))) begin
        i_3_reg_945 <= i_3_fu_511_p2;
        select_ln338_2_reg_930 <= select_ln338_2_fu_485_p3;
        select_ln338_4_reg_935 <= select_ln338_4_fu_499_p3;
        select_ln338_5_reg_940 <= select_ln338_5_fu_505_p3;
        select_ln340_3_reg_962 <= select_ln340_3_fu_557_p3;
        select_ln340_reg_950 <= select_ln340_fu_527_p3;
        tc_5_reg_925 <= tc_5_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_fu_294_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln338_reg_878 <= icmp_ln338_fu_317_p2;
        mul_cast_mid1_reg_889 <= mul_cast_mid1_fu_326_p2;
        or_ln338_reg_910 <= or_ln338_fu_351_p2;
        select_ln332_2_reg_895 <= select_ln332_2_fu_331_p3;
        select_ln332_7_reg_900 <= select_ln332_7_fu_344_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln332_7_reg_900_pp0_iter2_reg == 1'd1) & (icmp_ln336_reg_874_pp0_iter2_reg == 1'd0))) begin
        mul26_mid1_reg_972 <= mul26_mid1_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln332_7_reg_900_pp0_iter2_reg == 1'd0) & (icmp_ln338_reg_878_pp0_iter2_reg == 1'd0))) begin
        mul26_reg_967 <= mul26_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        tmp_0_2_fu_92 <= tmp_0_3_fu_680_p3;
        tmp_1_2_fu_96 <= tmp_1_3_fu_702_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Input1_ce0 = 1'b1;
    end else begin
        Input1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Input_r_ce0 = 1'b1;
    end else begin
        Input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        Output2_ce0 = 1'b1;
    end else begin
        Output2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (brmerge22_reg_983_pp0_iter7_reg == 1'd0))) begin
        Output2_we0 = 1'b1;
    end else begin
        Output2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        Output_r_ce0 = 1'b1;
    end else begin
        Output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (brmerge22_reg_983_pp0_iter7_reg == 1'd0))) begin
        Output_r_we0 = 1'b1;
    end else begin
        Output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_fu_294_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln336_reg_874_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input1_address0 = zext_ln351_2_fu_660_p1;

assign Input_r_address0 = zext_ln351_2_fu_660_p1;

assign Output2_address0 = zext_ln357_1_fu_719_p1;

assign Output2_d0 = $signed(tmp_1_3_reg_1029);

assign Output_r_address0 = zext_ln357_1_fu_719_p1;

assign Output_r_d0 = $signed(tmp_0_3_reg_1024);

assign add28_fu_650_p2 = (select_ln338_1_fu_638_p3 + zext_ln342_fu_647_p1);

assign add_fu_421_p2 = (mul_cast_reg_868 + trunc_ln340_fu_417_p1);

assign add_ln336_fu_299_p2 = (indvar_flatten65_fu_120 + 32'd1);

assign add_ln338_1_fu_377_p2 = (indvar_flatten25_fu_112 + 24'd1);

assign add_ln340_1_fu_363_p2 = (indvar_flatten_fu_104 + 16'd1);

assign add_mid1_fu_539_p2 = (select_ln332_1_fu_441_p3 + trunc_ln340_1_fu_535_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign brmerge22_fu_626_p2 = (select_ln340_2_fu_606_p3 | cmp43_not_fu_622_p2);

assign cmp40_not_fu_426_p2 = ((i_fu_100 != K_1) ? 1'b1 : 1'b0);

assign cmp40_not_mid1_fu_602_p2 = ((i_3_reg_945 != K_1) ? 1'b1 : 1'b0);

assign cmp43_not_fu_622_p2 = ((select_ln340_reg_950 != K_1) ? 1'b1 : 1'b0);

assign empty_70_fu_612_p2 = (select_ln340_reg_950 | select_ln340_3_reg_962);

assign empty_71_fu_616_p2 = ((empty_70_fu_612_p2 == 8'd0) ? 1'b1 : 1'b0);

assign grp_fu_732_p0 = grp_fu_732_p00;

assign grp_fu_732_p00 = select_ln332_2_reg_895;

assign grp_fu_732_p1 = 10'd26;

assign grp_fu_732_p2 = grp_fu_732_p20;

assign grp_fu_732_p20 = select_ln338_2_reg_930_pp0_iter3_reg;

assign grp_fu_740_p0 = grp_fu_740_p00;

assign grp_fu_740_p00 = select_ln340_1_fu_545_p3;

assign grp_fu_740_p1 = 12'd53;

assign grp_fu_740_p2 = grp_fu_740_p20;

assign grp_fu_740_p20 = add28_fu_650_p2;

assign i_3_fu_511_p2 = (select_ln338_fu_478_p3 + 8'd1);

assign icmp_ln336_fu_294_p2 = ((indvar_flatten65_fu_120 == mul_ln336_2) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_317_p2 = ((indvar_flatten25_fu_112 == mul_ln336_1) ? 1'b1 : 1'b0);

assign icmp_ln340_1_fu_339_p2 = ((indvar_flatten_fu_104 == mul_ln336) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_461_p2 = ((j_fu_88 == Ksize) ? 1'b1 : 1'b0);

assign icmp_ln353_1_fu_697_p2 = (($signed(tmp_1_reg_1018) > $signed(select_ln348_1_fu_690_p3)) ? 1'b1 : 1'b0);

assign icmp_ln353_fu_675_p2 = (($signed(tmp_0_reg_1012) > $signed(select_ln348_fu_668_p3)) ? 1'b1 : 1'b0);

assign j_1_fu_565_p2 = (select_ln340_fu_527_p3 + 8'd1);

assign mul26_fu_589_p0 = mul26_fu_589_p00;

assign mul26_fu_589_p00 = tc_4_reg_915;

assign mul26_fu_589_p1 = zext_ln336_cast_reg_856;

assign mul26_mid1_fu_597_p0 = mul26_mid1_fu_597_p00;

assign mul26_mid1_fu_597_p00 = tc_5_reg_925;

assign mul26_mid1_fu_597_p1 = zext_ln336_cast_reg_856;

assign mul_cast_fu_289_p0 = tr_fu_116[5:0];

assign mul_cast_fu_289_p1 = p_cast_reg_862;

assign mul_cast_mid1_fu_326_p0 = tr_5_fu_311_p2[5:0];

assign mul_cast_mid1_fu_326_p1 = p_cast_reg_862;

assign or_ln338_fu_351_p2 = (select_ln332_7_fu_344_p3 | icmp_ln338_fu_317_p2);

assign or_ln340_1_fu_522_p2 = (or_ln340_fu_517_p2 | icmp_ln338_reg_878);

assign or_ln340_fu_517_p2 = (select_ln338_5_fu_505_p3 | select_ln332_7_reg_900);

assign p_cast_fu_240_p1 = empty;

assign select_ln332_1_fu_441_p3 = ((icmp_ln338_reg_878[0:0] == 1'b1) ? mul_cast_mid1_reg_889 : mul_cast_reg_868);

assign select_ln332_2_fu_331_p3 = ((icmp_ln338_fu_317_p2[0:0] == 1'b1) ? tr_5_fu_311_p2 : tr_fu_116);

assign select_ln332_3_fu_632_p3 = ((icmp_ln338_reg_878_pp0_iter3_reg[0:0] == 1'b1) ? 10'd0 : mul26_reg_967);

assign select_ln332_4_fu_449_p3 = ((icmp_ln338_reg_878[0:0] == 1'b1) ? mul_cast_mid1_reg_889 : add_fu_421_p2);

assign select_ln332_5_fu_455_p3 = ((icmp_ln338_reg_878[0:0] == 1'b1) ? cmp40_not_mid157 : cmp40_not_fu_426_p2);

assign select_ln332_6_fu_466_p3 = ((icmp_ln338_reg_878[0:0] == 1'b1) ? icmp_ln342_1 : icmp_ln342_fu_461_p2);

assign select_ln332_7_fu_344_p3 = ((icmp_ln338_fu_317_p2[0:0] == 1'b1) ? icmp_ln340 : icmp_ln340_1_fu_339_p2);

assign select_ln332_fu_434_p3 = ((icmp_ln338_reg_878[0:0] == 1'b1) ? 8'd0 : tc_fu_108);

assign select_ln338_1_fu_638_p3 = ((select_ln332_7_reg_900_pp0_iter3_reg[0:0] == 1'b1) ? mul26_mid1_reg_972 : select_ln332_3_fu_632_p3);

assign select_ln338_2_fu_485_p3 = ((select_ln332_7_reg_900[0:0] == 1'b1) ? tc_5_fu_472_p2 : select_ln332_fu_434_p3);

assign select_ln338_3_fu_492_p3 = ((select_ln332_7_reg_900[0:0] == 1'b1) ? select_ln332_1_fu_441_p3 : select_ln332_4_fu_449_p3);

assign select_ln338_4_fu_499_p3 = ((select_ln332_7_reg_900[0:0] == 1'b1) ? cmp40_not_mid157 : select_ln332_5_fu_455_p3);

assign select_ln338_5_fu_505_p3 = ((select_ln332_7_reg_900[0:0] == 1'b1) ? icmp_ln342_1 : select_ln332_6_fu_466_p3);

assign select_ln338_6_fu_383_p3 = ((icmp_ln338_fu_317_p2[0:0] == 1'b1) ? 24'd1 : add_ln338_1_fu_377_p2);

assign select_ln338_fu_478_p3 = ((or_ln338_reg_910[0:0] == 1'b1) ? 8'd0 : i_fu_100);

assign select_ln340_1_fu_545_p3 = ((select_ln338_5_fu_505_p3[0:0] == 1'b1) ? add_mid1_fu_539_p2 : select_ln338_3_fu_492_p3);

assign select_ln340_2_fu_606_p3 = ((select_ln338_5_reg_940[0:0] == 1'b1) ? cmp40_not_mid1_fu_602_p2 : select_ln338_4_reg_935);

assign select_ln340_3_fu_557_p3 = ((select_ln338_5_fu_505_p3[0:0] == 1'b1) ? i_3_fu_511_p2 : select_ln338_fu_478_p3);

assign select_ln340_4_fu_369_p3 = ((or_ln338_fu_351_p2[0:0] == 1'b1) ? 16'd1 : add_ln340_1_fu_363_p2);

assign select_ln340_fu_527_p3 = ((or_ln340_1_fu_522_p2[0:0] == 1'b1) ? 8'd0 : j_fu_88);

assign select_ln348_1_fu_690_p3 = ((empty_71_reg_977_pp0_iter6_reg[0:0] == 1'b1) ? 16'd32769 : tmp_1_2_fu_96);

assign select_ln348_fu_668_p3 = ((empty_71_reg_977_pp0_iter6_reg[0:0] == 1'b1) ? 16'd32769 : tmp_0_2_fu_92);

assign tc_5_fu_472_p2 = (select_ln332_fu_434_p3 + 8'd1);

assign tmp_0_3_fu_680_p3 = ((icmp_ln353_fu_675_p2[0:0] == 1'b1) ? tmp_0_reg_1012 : select_ln348_fu_668_p3);

assign tmp_1_3_fu_702_p3 = ((icmp_ln353_1_fu_697_p2[0:0] == 1'b1) ? tmp_1_reg_1018 : select_ln348_1_fu_690_p3);

assign tr_5_fu_311_p2 = (tr_fu_116 + 8'd1);

assign trunc_ln340_1_fu_535_p1 = i_3_fu_511_p2[5:0];

assign trunc_ln340_fu_417_p1 = i_fu_100[5:0];

assign zext_ln336_cast_fu_236_p1 = zext_ln336;

assign zext_ln342_fu_647_p1 = select_ln340_reg_950_pp0_iter3_reg;

assign zext_ln351_2_fu_660_p1 = grp_fu_740_p3;

assign zext_ln357_1_fu_719_p1 = add_ln357_reg_997_pp0_iter7_reg;

always @ (posedge ap_clk) begin
    zext_ln336_cast_reg_856[9:2] <= 8'b00000000;
    p_cast_reg_862[5:2] <= 4'b0000;
end

endmodule //FPGA_Acc_maxpool_tile5_Pipeline_VITIS_LOOP_336_1_VITIS_LOOP_340_3_VITIS_LOOP_342_4
