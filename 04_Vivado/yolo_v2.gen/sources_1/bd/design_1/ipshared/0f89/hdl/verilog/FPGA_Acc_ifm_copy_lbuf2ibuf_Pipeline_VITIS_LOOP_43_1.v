// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FPGA_Acc_ifm_copy_lbuf2ibuf_Pipeline_VITIS_LOOP_43_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_256b_1,
        buf_256b_0,
        bn,
        TCol,
        local_buf_address0,
        local_buf_ce0,
        local_buf_q0,
        Coffset_cast,
        Input_w_cast,
        and_ln49_3,
        mul_ln51,
        input_buffer_0_address0,
        input_buffer_0_ce0,
        input_buffer_0_we0,
        input_buffer_0_d0,
        input_buffer_1_address0,
        input_buffer_1_ce0,
        input_buffer_1_we0,
        input_buffer_1_d0,
        pad_val,
        trunc_ln
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] buf_256b_1;
input  [15:0] buf_256b_0;
input  [7:0] bn;
input  [15:0] TCol;
output  [4:0] local_buf_address0;
output   local_buf_ce0;
input  [31:0] local_buf_q0;
input  [17:0] Coffset_cast;
input  [11:0] Input_w_cast;
input  [0:0] and_ln49_3;
input  [11:0] mul_ln51;
output  [11:0] input_buffer_0_address0;
output   input_buffer_0_ce0;
output   input_buffer_0_we0;
output  [15:0] input_buffer_0_d0;
output  [11:0] input_buffer_1_address0;
output   input_buffer_1_ce0;
output   input_buffer_1_we0;
output  [15:0] input_buffer_1_d0;
input  [15:0] pad_val;
input  [0:0] trunc_ln;

reg ap_idle;
reg local_buf_ce0;
reg input_buffer_0_ce0;
reg input_buffer_0_we0;
reg input_buffer_1_ce0;
reg input_buffer_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_233_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] trunc_ln_read_reg_463;
wire   [18:0] Input_w_cast_cast_fu_193_p1;
reg   [18:0] Input_w_cast_cast_reg_482;
reg   [7:0] t3_3_reg_487;
reg   [7:0] t3_3_reg_487_pp0_iter1_reg;
reg   [7:0] bn_local_load_reg_496;
reg   [7:0] bn_local_load_reg_496_pp0_iter1_reg;
reg   [7:0] bn_local_load_reg_496_pp0_iter2_reg;
wire   [18:0] xoffset_fu_252_p2;
reg   [18:0] xoffset_reg_501;
wire   [0:0] icmp_ln56_fu_267_p2;
reg   [0:0] icmp_ln56_reg_507;
reg   [0:0] icmp_ln56_reg_507_pp0_iter1_reg;
reg   [0:0] icmp_ln56_reg_507_pp0_iter2_reg;
wire   [0:0] and_ln49_fu_314_p2;
reg   [0:0] and_ln49_reg_514;
reg   [0:0] and_ln49_reg_514_pp0_iter2_reg;
wire   [11:0] add_ln51_fu_348_p2;
reg   [11:0] add_ln51_reg_524;
wire   [15:0] buf_256b_0_5_fu_353_p1;
reg   [15:0] buf_256b_0_5_reg_529;
reg   [15:0] buf_256b_1_4_reg_534;
wire   [63:0] zext_ln59_fu_322_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln51_1_fu_373_p1;
reg   [15:0] cnt_4_fu_74;
wire   [15:0] cnt_5_fu_333_p3;
wire    ap_loop_init;
reg   [7:0] bn_local_fu_78;
reg   [7:0] ap_sig_allocacmp_bn_local_load;
reg   [7:0] ap_sig_allocacmp_bn_local_load_1;
wire   [7:0] bn_local_4_fu_273_p3;
reg   [7:0] t3_fu_82;
reg   [7:0] ap_sig_allocacmp_t3_3;
wire   [7:0] t3_4_fu_239_p2;
reg   [15:0] buf_256b_0_4_fu_86;
wire   [15:0] buf_256b_0_6_fu_409_p3;
reg   [15:0] buf_256b_1_8_fu_90;
wire   [15:0] buf_256b_1_9_fu_403_p3;
wire   [15:0] select_ln49_fu_389_p3;
wire   [15:0] zext_ln43_1_fu_229_p1;
wire   [18:0] zext_ln43_fu_248_p1;
wire  signed [18:0] Coffset_cast_cast_fu_197_p1;
wire   [7:0] bn_local_3_fu_261_p2;
wire   [0:0] tmp_fu_291_p3;
wire   [0:0] icmp_ln48_fu_304_p2;
wire   [0:0] xor_ln48_fu_298_p2;
wire   [0:0] and_ln49_1_fu_308_p2;
wire   [15:0] cnt_fu_327_p2;
wire   [11:0] zext_ln51_fu_345_p1;
wire   [0:0] trunc_ln51_fu_378_p1;
wire   [15:0] select_ln51_fu_381_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

FPGA_Acc_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_233_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            bn_local_fu_78 <= bn_local_4_fu_273_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            bn_local_fu_78 <= bn;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            buf_256b_0_4_fu_86 <= buf_256b_0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            buf_256b_0_4_fu_86 <= buf_256b_0_6_fu_409_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            buf_256b_1_8_fu_90 <= buf_256b_1;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            buf_256b_1_8_fu_90 <= buf_256b_1_9_fu_403_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cnt_4_fu_74 <= 16'd1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cnt_4_fu_74 <= cnt_5_fu_333_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_233_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            t3_fu_82 <= t3_4_fu_239_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            t3_fu_82 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_w_cast_cast_reg_482[11 : 0] <= Input_w_cast_cast_fu_193_p1[11 : 0];
        and_ln49_reg_514 <= and_ln49_fu_314_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        bn_local_load_reg_496_pp0_iter1_reg <= bn_local_load_reg_496;
        icmp_ln56_reg_507_pp0_iter1_reg <= icmp_ln56_reg_507;
        t3_3_reg_487 <= ap_sig_allocacmp_t3_3;
        t3_3_reg_487_pp0_iter1_reg <= t3_3_reg_487;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln51_reg_524 <= add_ln51_fu_348_p2;
        and_ln49_reg_514_pp0_iter2_reg <= and_ln49_reg_514;
        bn_local_load_reg_496_pp0_iter2_reg <= bn_local_load_reg_496_pp0_iter1_reg;
        icmp_ln56_reg_507_pp0_iter2_reg <= icmp_ln56_reg_507_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_233_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bn_local_load_reg_496 <= ap_sig_allocacmp_bn_local_load;
        icmp_ln56_reg_507 <= icmp_ln56_fu_267_p2;
        xoffset_reg_501 <= xoffset_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln56_reg_507_pp0_iter1_reg == 1'd1))) begin
        buf_256b_0_5_reg_529 <= buf_256b_0_5_fu_353_p1;
        buf_256b_1_4_reg_534 <= {{local_buf_q0[31:16]}};
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_233_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_bn_local_load = bn;
    end else begin
        ap_sig_allocacmp_bn_local_load = bn_local_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_bn_local_load_1 = bn;
    end else begin
        ap_sig_allocacmp_bn_local_load_1 = bn_local_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t3_3 = 8'd0;
    end else begin
        ap_sig_allocacmp_t3_3 = t3_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_buffer_0_ce0 = 1'b1;
    end else begin
        input_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln_read_reg_463 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_buffer_0_we0 = 1'b1;
    end else begin
        input_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_buffer_1_ce0 = 1'b1;
    end else begin
        input_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln_read_reg_463 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_buffer_1_we0 = 1'b1;
    end else begin
        input_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_buf_ce0 = 1'b1;
    end else begin
        local_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Coffset_cast_cast_fu_197_p1 = $signed(Coffset_cast);

assign Input_w_cast_cast_fu_193_p1 = Input_w_cast;

assign add_ln51_fu_348_p2 = (mul_ln51 + zext_ln51_fu_345_p1);

assign and_ln49_1_fu_308_p2 = (xor_ln48_fu_298_p2 & icmp_ln48_fu_304_p2);

assign and_ln49_fu_314_p2 = (and_ln49_3 & and_ln49_1_fu_308_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bn_local_3_fu_261_p2 = (ap_sig_allocacmp_bn_local_load_1 + 8'd1);

assign bn_local_4_fu_273_p3 = ((icmp_ln56_fu_267_p2[0:0] == 1'b1) ? 8'd0 : bn_local_3_fu_261_p2);

assign buf_256b_0_5_fu_353_p1 = local_buf_q0[15:0];

assign buf_256b_0_6_fu_409_p3 = ((icmp_ln56_reg_507_pp0_iter2_reg[0:0] == 1'b1) ? buf_256b_0_5_reg_529 : buf_256b_0_4_fu_86);

assign buf_256b_1_9_fu_403_p3 = ((icmp_ln56_reg_507_pp0_iter2_reg[0:0] == 1'b1) ? buf_256b_1_4_reg_534 : buf_256b_1_8_fu_90);

assign cnt_5_fu_333_p3 = ((icmp_ln56_reg_507[0:0] == 1'b1) ? cnt_fu_327_p2 : cnt_4_fu_74);

assign cnt_fu_327_p2 = (cnt_4_fu_74 + 16'd1);

assign icmp_ln43_fu_233_p2 = ((zext_ln43_1_fu_229_p1 < TCol) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_304_p2 = (($signed(xoffset_reg_501) < $signed(Input_w_cast_cast_reg_482)) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_267_p2 = ((bn_local_3_fu_261_p2 == 8'd2) ? 1'b1 : 1'b0);

assign input_buffer_0_address0 = zext_ln51_1_fu_373_p1;

assign input_buffer_0_d0 = select_ln49_fu_389_p3;

assign input_buffer_1_address0 = zext_ln51_1_fu_373_p1;

assign input_buffer_1_d0 = select_ln49_fu_389_p3;

assign local_buf_address0 = zext_ln59_fu_322_p1;

assign select_ln49_fu_389_p3 = ((and_ln49_reg_514_pp0_iter2_reg[0:0] == 1'b1) ? select_ln51_fu_381_p3 : pad_val);

assign select_ln51_fu_381_p3 = ((trunc_ln51_fu_378_p1[0:0] == 1'b1) ? buf_256b_1_8_fu_90 : buf_256b_0_4_fu_86);

assign t3_4_fu_239_p2 = (ap_sig_allocacmp_t3_3 + 8'd1);

assign tmp_fu_291_p3 = xoffset_reg_501[32'd18];

assign trunc_ln51_fu_378_p1 = bn_local_load_reg_496_pp0_iter2_reg[0:0];

assign trunc_ln_read_reg_463 = trunc_ln;

assign xoffset_fu_252_p2 = ($signed(zext_ln43_fu_248_p1) + $signed(Coffset_cast_cast_fu_197_p1));

assign xor_ln48_fu_298_p2 = (tmp_fu_291_p3 ^ 1'd1);

assign zext_ln43_1_fu_229_p1 = ap_sig_allocacmp_t3_3;

assign zext_ln43_fu_248_p1 = ap_sig_allocacmp_t3_3;

assign zext_ln51_1_fu_373_p1 = add_ln51_reg_524;

assign zext_ln51_fu_345_p1 = t3_3_reg_487_pp0_iter1_reg;

assign zext_ln59_fu_322_p1 = cnt_4_fu_74;

always @ (posedge ap_clk) begin
    Input_w_cast_cast_reg_482[18:12] <= 7'b0000000;
end

endmodule //FPGA_Acc_ifm_copy_lbuf2ibuf_Pipeline_VITIS_LOOP_43_1
